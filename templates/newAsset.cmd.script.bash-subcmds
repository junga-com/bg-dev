#!/usr/bin/env bash

###############################################################################
# Includes and defines

packageName=%packageName%

source /usr/lib/bg_core.sh
#import <someLibrary.sh> ;$L1;$L2

cmds="cmd1 cmd2 dumpInput"
cmdlineSyntax="[-q|--quiet] [-v|--verbose] [-f|--force] [-u|--user=<user>]  <cmd>"

###############################################################################
# Command manpage
# usage: %assetName% [-q|--quiet] [-v|--verbose] [-f|--force] [-u|--user=<user>]  <cmd>
# <one line description...>
# <description...>
#
# Options:
# Params:
# See Also:


###############################################################################
# Functions

# this is invoked by oob_invokeOutOfBandSystem when -hb is the first param
# The bash completion script calls this get the list of possible words.
function oob_printBashCompletion()
{
	bgBCParse "$cmdlineSyntax" "$@"; set -- "${posWords[@]:1}"
	#bgtraceVars clInput posWords posCwords completingArgName -l"dollar vars='$*'"

	case $completingArgName in
		'<user>') awk -F: '{print $1}' /etc/passwd ;;
	esac
}

# Use this function to provide BC suggestions for positional parameters
# see man bg-overviewOutOfBandScriptFunctions for details
function oob_helpMode()
{
	local -A clInput; bgCmdlineParse -RclInput "$cmdlineSyntax" "$@"; shift "${clInput[shiftCount]}"
	case ${clInput[cmd]:-main} in
		main)  man "$(basename $0)" ;;
		*)     man "$(basename $0)" ;;
	esac
}


###############################################################################
# Main script

# default values for parameters
verbosity=1
forceFlag=""
userName=""
oob_invokeOutOfBandSystem "$@"
while [ $# -gt 0 ]; do case $1 in
	-v | --verbose)  ((verbosity++)) ;;
	-q | --quiet)    ((verbosity--)) ;;
	--verbosity*)    bgOptionGetOpt val: verbosity "$@" && shift ;;
	-f  | --force)   forceFlag="-f" ;;
	-u* | --user)    bgOptionGetOpt val: userName "$@" && shift ;;
	*)  bgOptionsEndLoop "$@" && break; set -- "${bgOptionsExpandedOpts[@]}"; esac; shift;
done
cmd="$1"; shift

case ${cmd:-cmd1} in
	cmd1) echo "this is cmd1" ;;
	cmd2) echo "this is cmd2" ;;
	dumpInput)
		printf "${csiYellow}Input Dump:${csiNorm}\n"
		printfVars  "    " cmd verbosity forceFlag userName
		;;
	*) assertError -v subCmd:cmd "Unknown sub command." ;;
esac
