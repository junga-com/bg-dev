#!/usr/bin/env bash

###############################################################################
# Includes and defines

packageName=bg-dev

source /usr/lib/bg_core.sh
import Project.sh ;$L1;$L2
import SandboxProject.sh ;$L1;$L2
import PackageAsset.PluginType ;$L1;$L2

supportedCmds="newProj assets install uninstall funcman tests buildPkg analyze npm sdlc bashBuiltins"

declare -A vmCodeNames=(
	[bionic]=
	[focal]=
	[jammy]=
	[kinetic]=
	[devel]=
)

###############################################################################
# Command manpage
# usage: bg-dev [-q|-v] newProj|assets|install|uninstall|funcman|tests [<subCmdOptions>] [<subCmdArguments>]
# a tool to manage software projects created in the style of bg-core.
# This command is organized into sub commands. Some sub commands have their own manpage named bg-dev-<subcommand>.
#
# A project is a folder that uses git for verion control and sharing. It can be installed directly from its project folder and
# also be built into a deb or rpm package for distribution and installation via package managers.
#
# A project contains zero or more assets of various types. It is those assets that get installed into a host.
#
# Sub Commands:
#  * status   : summarize the change status of the sandbox
#  * newProj  : create a new package project folder
#  * assets   : A package project is made up of assets. List, add and remove assets.   See man(1) bg-dev-assets
#  * install  : Copy the a project's assets into a destination file system structure.  See man(1) bg-dev-install
#  * uninstall: remove a project's assets from a destination file system structure.    See man(1) bg-dev-install
#  * funcman  : scans the project's source to generate documentation and a ctags file. See man(1) bg-dev-funcman
#  * tests    : run and manage a project's tests.                                      See man(1) bg-dev-tests
#
# Status:
# Status provides a summary of the sandbox state with respect to git repo changes and to the last release.
# For each project in the sandbox a summary line is printed. With -v and -vv additional lines may be printed after the summary line.
# The format of the summary line is...
#    <3charIndicator> <projectName>    : <projectVersion>   <dirtyState> <dirtyDetails>
# Where...
# <3charIndicator> : first character  indicates whether the working tree has changes that need to be committed
#                    second character indicates whether there are commits that need to be pushed or pulled related to the remote
#                    third character  indicates whether there are changes since the last release that need to be released
# <projectName>    : in a sandbox, this is the the local folder name of the project which may or may not be the project name.
# <projectVersion> : the version that was checked out. If changes have been made then a '+' will be appending indicating that the
#                    current folder represents the next version to be released and not the actual version that was released.
# <dirtyState>     : one of...
#                    'dirtyFolder'   : meaning that there are changes in the working tree that have not yet been committed
#                    'newCommits'    : there are local commits that have not been pushed to the remote
#                    'behind'        : there are new commits on the remote that have not yet been pulled.
#                    'dirtyBranches' : the current branch is syncd but there are other branches that are not syncd
#                    'syncd'         : all branches in the local repo are exactly the same as on the remote(s)
# <dirtyDetails>   : contains the number of differences in 1) the working folder, 2) commitsAhead, 3) commitsBehind
#                    '[changes:<N>][commitsBehind:<M>][commitsAhead:<O>]'
#
# Builtin Asset Types:
# These are the asset types that are supported natively by this command without requiring a plugin from another package.
#  * AwkLib      : (*.awk) an awk language script. awk is the gnu text processing tool.
#  * lib.bash    : (*.sh) a bash language library script mean to be imported (aka sourced) by bash scripts
#  * Cmd         : (root folder) an executable file. It can be binary or script. Scripts require #!<processor> first line.
#  * Cron        : (cron.d/*) a cron configuration file
#  * Data        : (data/*) any files in any foder structure. Will be installed on host and avaialble in scripts at $pkgDataFolder/...
#  * Doc         : (doc/*) any files meant to document the project. Includes changelog and copyright
#  * Etc         : (etc/*) initial config files to be installed on the target host.
#  * GlobalBashCompletion : bash_completion scripts that will be loaded at every user's bash shell startup.
#  * Manpage     : (man<n>/*) manpages. Note that funcman generates man pages from source that will be automatically added to the
#                  asset manifest but you can add manually created pages too in the man<n>/ folders. <n> is the section number
#  * Opt         : (opt/) arbitrary files put in the /opt hierarchy.
#  * SysDInit    : (systemd/*) init scripts for systemd daemons and event handlers
#  * Syslog      : (rsyslog.d/) syslog configuration
#  * SysVInit    : (init.d/) old style init scipts for daemons
#  * UnitTest    : (unitTests) Tests are not installed but are available for tools to use
#
# See Also:
#    man(1) bg-dev-assets
#    man(1) bg-dev-install
#    man(1) bg-dev-funcman
#    man(1) bg-dev-newProj
#    man(1) bg-dev-tests

###############################################################################
# Functions

# this is invoked by oob_invokeOutOfBandSystem when -hb is the first param
# The bash completion script calls this get the list of possible words.
function oob_printBashCompletion()
{
	local -A clInput
	bgBCParse -RclInput "<glean>" "$@"; set -- "${posWords[@]:1}"

	# I dont remember what needed the project context but now constructing a project instance makes BC noticably slow so I commentent it out
	#local -A project=(); ConstructObject Project project
	#pkgName="${project[packageName]}"

	cmd="$1"; shift

	case $cmd:$posCwords in
		*:1) echo $supportedCmds ;;
		install:2|uninstall:2) echo "<hostType> deb rpm detect" ;;
		install:3|uninstall:3) echo "<destDir> / .bglocal/pkgStaging-$1" ;;

		buildPkg:*)     echo "deb rpm both" ;;
		analyze:2)      echo "buildDeps buildRaw" ;;
		npm:2)          echo "install update status atomPkgStatus atomPkgInstall atomPkgUninstall" ;;
		sdlc:2)         echo "status commit push pull publish bumpVersion revert" ;;
		bashBuiltins:2) echo "valgrind" ;;
		bashBuiltins:*)
			subcmd="${posWords[2]}"
			shift
			subPos=$((posCwords-2))
			case $subcmd:$subPos in
				valgrind:*)
					echo "<cmdline_to_test>"
					;;
			esac
			;;

		assets:2)       echo "scan update list summary listAssetTypes addNewAsset" ;;
		assets:*)
			subcmd="${posWords[2]}"
			shift
			subPos=$((posCwords-2))
			import bg_awkDataBC.sh  ;$L1;$L2
			case $subcmd:$subPos in
				list:*)  completeAwkDataAttributeTerm "manifest|${manifestProjPath}-" "$cur" "${posWords[@]:3}" ;;
				addNewAsset:1)
					echo "<assetType>"
					if [[ "$cur" =~ ^(plugin)$ ]]; then
						echo "$cur $cur."
					elif [[ "$cur" =~ ^plugin[.] ]]; then
						echo "\$(cur ${cur#plugin.}) "
						$Plugin::types
					# elif [[ "$cur" =~ ^cmd[.] ]]; then
					# 	templateList "newAsset.cmd" | sed 's/newAsset[.]//g'
					else
						static::PackageAsset::listKnownAssetTypes | sed -e 's/plugin /plugin%3A /;s/cmd /cmd%3A /'
					fi
					;;
				addNewAsset:2)
					echo "<subType> --"
					local assetType="$1"
					local -a subTypes=()
					templateList -A subTypes "newAsset.$assetType"
					for subType in "${subTypes[@]}"; do
						# 2022-04 bobg: changed '##+' to '#newAsset.$assetType' -- I think + was a typo but I couldn't remember if there is some valid + syntax
						#echo "${subType##*+}"
						echo "${subType#newAsset.$assetType}"
					done
					;;
				addNewAsset:3) echo "<newAssetName>" ;;
			esac
			;;

		funcman:2)  echo "update test listTemplates" ;;
		funcman:*)
			case $1:$((posCwords-2)) in
				update:*) bgBCParse "[--compare] [--dry-run]" 1 bg-dev "$cur" ;;
				test:*)  echo "\$(doFilesAndDirs) -q -v";;
			esac
			;;

		newProj:*)
			bgBCParse "[--pkgName=<pkgName>] [--companyName=<companyName>] [--targetDists=<targetDists>] [--defaultDebRepo=<defaultDebRepo>] [--projectType=<projectType>] <projName>" 1 bg-dev "$cur"
			case $completingArgName in
				'<projectType>')
					(cd $pkgDataFolder/projectTemplates/; ls -1)
					;;
			esac
			;;

		tests:2) echo "list run report show FreshVMs" ;;
		tests:*)
			import bg_unitTestRunner.sh ;$L1;$L2
			case $1:$((posCwords-2)) in
				list:*)    bgBCParse "[-f|--fullyQualyfied]" 1 bg-dev "$cur"; completeUtIDSpec "$cur" ;;
				run:*)     completeUtIDSpec "$cur" ;;
				report:*)  completeUtIDSpec "$cur" ;;
				show:*)    completeUtIDSpec "$cur" ;;
				FreshVMs:1) echo "status centosS9" ${!vmCodeNames[@]} ;;
				FreshVMs:2) echo "run shell exec start stop delete" ;;
			esac
			;;
	esac
	exit
}

# Use this function to provide BC suggestions for positional parameters
# see man bg-overviewOutOfBandScriptFunctions for details
function oob_helpMode()
{
	local -A clInput; bgCmdlineParse -RclInput "<cmd>" "$@"
	case ${clInput[cmd]:-main} in
		main)  man "$(basename $0)" ;;
		*)     man "$(basename $0)" ;;
	esac
}


###############################################################################
# Command manpage: bg-dev-assets
# usage: bg-dev assets list|summary|update|scan|listAssetTypes [-v|-q]
# operations on a project's assets.
# Assets are things that are installed on the target host when a package is installed. They include commands, daemons, libraries,
# doceumentation files, etc...
#
# The bg-dev command operates on a project folder so the assets it operates on are only the ones from the project. The bg-core
# command has similar features to list assets but that operates on all installed (or virtually installed) assets. A 'manifest'
# file is what keeps track of assets. A project has a local manifest in ./.bglocal/manifest that lists just the assets in that
# project and the paths in that file are relative to the project root. When the project is built into a package, the local manifest
# file is transformed into a 'host manifest' file where the paths are the absolute location in the target host's filesystem. When
# the package is installed, its ost manifest file is merged with any other installed package's host manifest files to form the current
# master host manifest file. When a developer virtually installs a sandbox project, a <sandboxFolder>/.bglocal/hostmanifest file is
# built which is a copy of that host's master host manifest which then replaces or adds the virtually installed package's host
# manifests.
#
# A manifest file is a valid awkData data file whose schema is described by the table name 'manifest' (a awkDataSchema asset
# provided by the bg-core package)
#
# List Sub Command:
# List / query the set of assets in the project. This displays assets from the project's ./.bglocal/manifest file. That file is
# typically kept up-to-date when assets are added or removed from the project but if in doubt, run the 'update' sub command to
# ensure that it is.
#
# Update Sub Command:
# Update builds a new manifest file in a temporary location and then only replaces the contents of .bglocal/manifest if it has
# changed so that the timestamp of that file reflects when assets are added or removed.
#
# Scan Sub Command:
# Scans the project identified by the PWD (aka current working directory) to discover the assets that it contains. This is the
# same algorithm used by 'update' but it only prints the results to stdout instead of saving them in the project's manifest file.
#
# Summary Sub Command:
# Prints to stdout how many assets of each type are contained in the project.
#
# ListAssetTypes Sub Command:
# Print each of the asset types known to the system t this time. Installing other packages can add additional asset types.
#
# Plugins:
# To support a new type of project asset, a helper command can be added that scans the project source folder and returns matching
# files or folders of that asset type. Any command that starts with bg-dev-findAsset* or bash function starting with bgAssetFind*
# will be invoked during the manifest file build. If the command finds any assets it should write them to stdout in the line format
# of the manifest file.
#
# These findAsset plugin commands are invoked with the CWD/PWD set to the project's root folder. $pkgName is set to the project's
# package name.
#
# Typicaly an asset type plugin would be provided in a package project and when installed provides an bg-dev-findAsset_<assetType>
# command and a bg-dev-install_<assetType> command (see bg-dev-install). Alternatively, it can provide a single script plugin file
# that contains a bgAssetFind_<assetType> function and bgInstall_<assetType> function. See man bg-plugins.
#
# If a project relies on an extended asset type provided by some other package, that package needs to be installed when the project
# is installed (or built into a package) or else that asset will not be included.
#
# The Manifest File
# A project's manifest is a text file that lists each installable asset contained in the project.
# The manifest file is built by scanning the project with scanner plugins that recognize assets of various types.
# The manifest file is built just before the project is installed (including virtual installations) or built into a package. You
# can also use the update subcommand to make sure that it is up-to-date. The manifest typically resides in .bglocal/ so that it is
# not committed to the project's repository.
#
# To build the manifest the builtin builder scans the project folder for any builtin asset type and then
# invokes any available asset types plugins to recognize and include assets of their type. It should be very
# fast to build the manfest and it can be updated frequently by tools in the developer environment.
#
# File Format:
# <pkgName>           <assetType>         <file|folder>
# Each line has three columns separated by one or more spaces or tabs. Including <pkgName> makes it easy to combine manifests from
# all the packages that use them that are installed on a host. The file or folder is relative to the project root in the package's
# local, working manifest file but the version built into the package and installed on the target host has paths converted to their
# absolute paths on the target.
#
# By convention to make the file friendlier to human inspection the first two columns are right padded to 20 characters each,
# however that is not necessary for proper functioning.
#
# This is a bash command that formats the line correctly.
#    printf "%-20s %-20s %s\n" "$pkgName" "$assetType"  "$fileOrFolderRelToProjRoot"
function assets()
{
	local -A project; ConstructObject Project::package project
	pkgName="${project[packageName]}"

	local verbosity=${verbosity}
	while [ $# -gt 0 ]; do case $1 in
		-v|--verbose) ((verbosity++)) ;;
		--verbosity*) bgOptionGetOpt val: verbosity "$@" && shift ;;
		-q|--quiet) ((verbosity--)) ;;
		*)  bgOptionsEndLoop "$@" && break; set -- "${bgOptionsExpandedOpts[@]}"; esac; shift;
	done

	local subcmd="$1"; shift

	case ${subcmd:-list} in
		scan)           static::PackageAsset::findAllProjectAssets  "$@" ;;
		update)         static::PackageAsset::updateProjectManifest "$@" ;;
		list)           static::PackageAsset::listProjectAssets     "$@" ;;
		summary)        manifestSummary --file="$manifestProjPath"  "$@" ;;
		addNewAsset)    static::PackageAsset::addNewAsset           "$@" ;;
		listAssetTypes) static::PackageAsset::listKnownAssetTypes   "$@" ;;
		*) assertError -v subcmd "unknown sub command"
	esac
}


# Command manpage: bg-dev-install
# usage: bg-dev install [-v|-q] [--pkg=deb|rpm]
# usage: bg-dev uninstall [-v|-q] [--pkg=deb|rpm]
# copies the installable assets contained in a project into a destination file system tree.
# This install action is lower level than package manager installs. This is similar to the 'install' target in a project's makefile.
# When building a package for deb or rpm, this is used to create the staging file system tree that will go into the package file.
# A developer can also use this to install a project onto a host directly from its source folder for testing or for personal
# projects that are not meant for distribution.
#
# The default destination is the root filesystem of the host where it is running. The user will typically be prompted for their
# sudo password in that case. An uninstall script will be left in /var/lib/bg-core/<pkgName>/uninstall.sh. When invoked, it will
# undo all the actions done by install.
#
# The --pkg=<pkgType> option changes the destination file system tree to the project's .bglocal/pkgStaging-<pkgType> folder. .bglocal
# is a project subfolder that is ignored by get so development tools can use it as a project local temp folder.
#
# The <pkgType> may affect the structure of the destination filesystem as well its root path. When installing to the host filesystem,
# the <pkgType> is gleaned from the environment. The initial algorithm 1) if 'apt' is avaliable use 'deb' 2) if 'rpm' is available
# use 'rpm' 3) by default use 'deb'. The notion is that any OS distribution that supports apt will have a filesystem structure that
# complies with the debian package standard and likewise supporting rpm implies support for the Red Hat standard.
#
# Implementation:
# This function updates the manifest file to make sure that it is up to date and then iterates over each asset type present in the
# manifest and calls a helper command based on the asset type and <pkgType>.
#
# Helper Commands:
# The helper commands follow a naming convention that allows common implementations across <pkgTypes> where appropriate and specific
# implementations when needed.
# These command names are tried, in order, until one is found.
#     bg-dev-install${assetType^}_${pkgType}   e.g. bg-dev-installBashCmd_deb
#     install${assetType^}_${pkgType}          e.g. installBashCmd_deb
#     bg-dev-install${assetType^}              e.g. bg-dev-installBashCmd
#     install${assetType^}                     e.g. installBashCmd
# The bg-dev-install* names would typically match external commands installed by some package and the install* names would typically
# match a builtin function or a function provided by a bgplugin
#
# Helper Runtime Environment:
# This is the environment that this function provides for helper functions that it invokes
#    working directory: the CWD/PWD is the root of the project's source folder. The DESTDIR may be relative to this so if you change
#                directory in your helper command, you need to take that into account
#    $1,$2,..$N : the files or folders of this asset type that are present in the project. The paths are relative to the project
#                 root
#    DESTDIR    : The root of the filesystem being installed to. If its empty, the installation goes to the real system folders on
#                 the host. The --pkg option changes it to the staging directory inside the package source folder
#    PRECMD     : This is typically either "" or "sudo " depending on whether the current user has access to write to DESTDIR
#                 helper functions should prefix comands that modify the DESTDIR filesystem with it like '$PRECMD cp $file $DESTDIR/...'
#                 This convention supports code that can install to the system folders using sudo or the pkgStaging folder without.
#    pkgName    : the name of the package being installed
#    UNINSTSCRIPT : path to the uninstall script that the helper should append to. Each action that the installer does to the DESTDIR
#                 should be represented by a command appended to this script that undoes that action. The uninstall script is typically
#                 not used by package managers but is used when installing/uninstalling to/from a host directly from the project
#                 folder.
#    HOSTMANIFEST : path to the host manifest file that is built during installation. Its similar to the package manifest but the
#                 files in the third column have the absolute path on the host instead of the relative path in the project folder.
#    manifestProjPath : contains the relative path from the project root of the manifest file. This is typically not needed because
#                 the entries from this file that match the asset type are passed to the command as cmdline arguments.
#
# Uninstall:
# The companion subcommand 'uninstall' invokes the script created by the install subcommand. This can be useful if you install a
# project onto a host for testing and then want to remove it. You can give uninstall the same --pkg option that install takes to
# make it operate on the package staging folder but aside from testing to see if the uninstall script works, that is not very useful.
#
# Since uninstall only invokes the uninstall script left behind by the last install, it will remove correctly remove assets from the
# last installed version even when they no longer exist in the current project version being installed.
#
# The install subcommand will automatically invoke an uninstall script found in the DESTDIR to clean up DESTDIR before the new version
# is installed. This ensures that if you remove an asset, when you re-install the project, that asset will be removed from the DESTDIR
function install()
{
	local -A project; ConstructObject Project::package project
	pkgName="${project[packageName]}"

	static::PackageAsset::installAssets "$@"
}

function uninstall()
{
	local -A project; ConstructObject Project::package project
	pkgName="${project[packageName]}"

	static::PackageAsset::uninstallAssets "$@"
}














# Command manpage: bg-dev-funcman
# usage: bg-dev funcman update [-v|-q] [--dry-run] [--compare] [-t|--templateFolder=<path>] [-o|--outputFolder=<path>]
# usage: bg-dev funcman test [-v|-q] <sourceFile>
# Funcman is a system that generates documentation and other artifacts from source code.
#
# The name funcman comes from shortening "function manpage" because originally it only produced manpages for library functions but
# now it creates other types of documentation and artifacts from the source files as well function manpages.
#
# Each lib.bash asset in the project will have a man7 page generated and each bashCmd asset will have a man1 page. lib.bash files
# will also produce a man3 page for any function that does not start with a '_' (a leading underscore indicates a private function)
#
# For any of these automatically generated manpages, the script author can provide additional content for that page in a comment
# block. For the bashCmd or lib.bash page, the comment block is any contiguous block of un-indented comments that start with
# "# Command" or "# Library". For function manpages its the block of comments that immediately precede the function declaration
# and any alias function declarations.
#
# The code author can embed additional man pages in the source code by including a comment block starting with
# "# man(<n>.<type>) <pageName>" where <n>.<type> refers to a template named funcman.<n>.<type> in a profile folder or this project's
# data folder.
#
# Formatting:
#    See man(5) funcman -- documents the comment syntax supportted to create manpages
#
# Update Sub Command:
# The update sub command updates the generated manpages for the project that the command is running in. It will only update the
# timestamp on manpage files whose content has changed. Generated manpages reside in the .bglocal/funcman/ sub folder in the project
# It generates the current manpage content in a temporary folder. Then it compares those files with the ones in .bglocal/funcman.
# If neither the --dry-run or --compare options are specified it will go on to make the changes in .bglocal/funcman needed to make
# it be identical to the temporary folder. If --dry-run is specified, it will stop and print out the name of the temporary folder so
# that the user can inspect the contents. If --compare is specified, it will stop and open the two folders in the compare application
# registered for the user. See man(3) getUserCmpApp
# Update invokes the funcman_runBatch library function to do its work. See man(3) funcman_runBatch
#
# Test Sub Command:
# The test subcommand runs the funcman scanner a source file without generating the manpages but printing diagnostic information
# to stdout. This is typically used to confirm that the scanner is interpretting the source correctly to create the intended manpages.
# Add -v (verbsose) options to increase the printed diagnostics and -q (quiet) options to decrease it.
#
# ListTemplates Sub Command:
# Prints the names of the known funcman templates
#
# See Also:
#    man(7) bg_funcman.sh
#    man(3) getUserCmpApp
#    man(3) funcman_runBatch
#    man(3) funcman_testRun
function funcman() {
	local -A project; ConstructObject Project::package project
	pkgName="${project[packageName]}"

	import bg_funcman.sh ;$L1;$L2

	local cmd="${1:-update}"; shift
	case ${cmd} in
		update)       funcman_runBatch       "$@" ;;
		test)		  funcman_testRun        "$@" ;;
		listTemplates) funcman_listTemplates "$@" ;;
		*) assertError -v cmd "unknown cmd" ;;
	esac
}


# usage: bg-dev newProj
function newProj() {
	static::Project::createPkgProj "$@"
}


# Command manpage: bg-dev-tests
# usage: bg-dev tests list   [-f|--fullyQualyfied] [all]
#        bg-dev tests list   [-f|--fullyQualyfied] <utIDSpec> [...<utIDSpecN>]
# usage: bg-dev tests run    [-v|--verbose] [all]
#        bg-dev tests run    [-v|--verbose] <utIDSpec> [...<utIDSpecN>]
# usage: bg-dev tests report [-v|--verbose] [all]
#        bg-dev tests report [-v|--verbose] <utIDSpec> [...<utIDSpecN>]
# usage: bg-dev tests show   [-v|--verbose] [all]
#        bg-dev tests show   [-v|--verbose] <utIDSpec> [...<utIDSpecN>]
# This is the front end to the unit test framework for bg-core style pacakges.
# Note: The terms unittest and testcase are used interchangably in this manpage to refer to a testcase inside the unittest framework
# but keep in mind that there can be other types of testcases too.
#
# This bd-dev subcmd manages the persistent output of the testcases and the platonic forms of that output which is used to determine
# if the testcase passes or not. When developing testcases, a developer will often invoke a unittest file directly which prints the output
# to the terminal and does not update the persistent data. See man(1) bg-utRunner
#
# UnitTests in Projects:
# Each bg-dev style project folder can contain a ./unitTest/ folder with one or more unittest libraries. By convention, each
# library asset in the project would have a unitTest/<libnam>.sh.ut. For Example ./lib/bg_template.sh would have
# ./unitTests/bg_template.sh.ut. Each unittest library contains a one or more testcase functions. Each testcase function can
# optionally have multiple cmdlines (i.e the argument list passed to the testcase function). Each element in that array creates
# a testcase. If no cmdline array is defined for a function, one testcase will be created for the function that
# calls the testcase function with no arguments.
#
# Testcases are identified by their utID. A fully qualified utID has the form <projectName>:<utFilename>:<utFunctionName>:[<cmdlineName>]
# When working in a project folder, the '<projectName>:' prefix is omitted. Note that <utFilename> does not include the .ut extension.
# The <cmdlineName> are the indexes of the array with the same name as the <utFunctionName>.
#
# When a testcase is ran, the framwork invokes the <utFunctionName> with the arguments from <cmdlineName> and collects and formats the
# output written to stdout and stderr along with the exit code. This formatted output is written to a hidden file named ./unitTests/.<utFilename>.run
#
# The testcase is considered to have passed if the output it produces is logically equivalant to the expected output that is committed
# to the project's repo. That saved, expected output is stored in ./unitTests/.<utFilename>.plato. The term 'plato' is as a nod to
# the philosopher's ideas. Lines that start with # or // are not considered part of the logical output and do not need to match.
# Those lines can be useful to humans understanding how to interpret the output to tell if its correct or not.
#
# There are two steps to controlling the behavior of a package through its testcases. First is editting the plato data to ensure
# that it represents the desired functionality. Second is developing the source the code that is the target of a test so that it
# produces that output. In practice, a test case author typically writes a new test, observeres the output and if it produces the
# output that is considered correct, copies that actual output to the plato data.
#
# After the initall plato data is set, from that point on, the testcase will monitor if anything changes the expected output. If
# so, the testcase fails and someone decides if the code needs to change to keep the expected behaior the same, or if the plato
# data should change to document that the expected behavior is now different.  The git history of the plato data is the history of
# how the project's behavior (which could be an API) has evolved over time.
#
# A good testcase will output to un-commented lines, only information that is relavent to the target of the test functioning as required
# deviod of arbitrary information that would not affect whether the target is working correctly. That way the testcase will only
# break when a significant change in behavior happens.
#
# run sub command:
# exectues the specified testcases, updates the saved data and reportes on the outcome. Run reports on two things. First is whether
# each testcase produced new, updated, or unchanged output relative to the last time it was ran. Second is whether each test case
# passed, failed, had a setup error, or is missing plato data which means that it is uninitialized.
#
# list sub command:
# prints the utID for each testcase that matches the <utIDSpec> specified.
#
# report sub command:
# produces similar output as the run command by using the previous run data instead of runing the testcases. The modification
# information is supressed since it is all unchanged.
#
# See Also:
#    man(1) bg-utRunner
#    man(7) bg_unitTest.sh
#    man(7) bg_unitTestsRunner.sh
#    man(3) ut
function testsCntr()
{
	local -n project; ConstructObject Project project
	pkgName="${project[packageName]}"

	import bg_unitTestRunner.sh ;$L1;$L2

	local cmd="${1:-list}"; shift
	case ${cmd} in
		list)       utfList       "$@" ;;
		run)		utfRun        "$@" ;;
		report)     utfReport     "$@" ;;
		show)       utfShow       "$@" ;;
		parse)      utfIDParse -t "$@" ;;
		FreshVMs)
			import FreshVMs.PluginType   ;$L1;$L2
			static::FreshVMs::cntr "$@"
			;;
		*) assertError -v cmd "unknown cmd" ;;
	esac
}



# usage: makeCntr
# build the current project
function makeCntr()
{
	local -n project; ConstructObject Project project
	pkgName="${project[packageName]}"

	$project.makePackage "$@"
}

# usage: analyzeCntr <cmd>|buildDeps|buildRaw
function analyzeCntr()
{
	local -n project; ConstructObject Project project
	$project.cdToRoot

	import bg_bashParse.sh  ;$L1;$L2

	local cmd="$1"; shift
	case $cmd in
		buildDeps) bparse_build  "$@" ;;
		buildRaw)  bparse_raw    "$@" ;;
		*) assertError -v cmd "unknown cmd"
	esac
}


# usage: npmCntr <cmd>|status|install|update
function npmCntr()
{
	local -n project; ConstructObject Project project
	$project.cdToRoot

	import bg_jsNodePkg.sh  ;$L1;$L2
	makeListsOfProjects

	local cmd="$1"; shift
	case ${cmd:-status} in
		status)           jsNode_status              "$@" ;;
		install)          jsNode_install             "$@" ;;
		update)           jsNode_update              "$@" ;;
		atomPkgStatus)    atomPluginPkgStatus        "$@" ;;
		atomPkgInstall)   atomPluginPkgInstallLink   "$@" ;;
		atomPkgUninstall) atomPluginPkgUninstallLink "$@" ;;
		*) assertError -v cmd "unknown cmd"
	esac
}

# usage: sdlcCntr <cmd>|status|commit
function sdlcCntr()
{
	local -n project; ConstructObject Project project
	$project.cdToRoot

	local cmd="$1"; shift
	case ${cmd:-status} in
		status)           $project.status      "$@" ;;
		commit)           $project.commit      "$@" ;;
		push)             $project.push        "$@" ;;
		pull)             $project.pull        "$@" ;;
		publish)          $project.publish     "$@" ;;
		bumpVersion)      $project.bumpVersion "$@" ;;
		revert)           $project.revert      "$@" ;;
		*) assertError -v cmd "unknown cmd"
	esac
}

function bashBuiltinsCntr()
{
	local cmd="$1"; shift;
	case $cmd in
		valgrind)
			local dbgBashPath="../../bashParse/bash"
			while [ $# -gt 0 ]; do case $1 in
				--dbgBashPath*)  bgOptionGetOpt val: dbgBashPath "$@" && shift ;;
				*)  bgOptionsEndLoop "$@" && break; set -- "${bgOptionsExpandedOpts[@]}"; esac; shift;
			done
			[ ! -x "$dbgBashPath" ] && assertError -v dbgBashPath "The dbgBashPath is not the path to a bash executable built with '-g -O0'. Use the option --dbgBashPath='<path>' to change the path"
			local tmpFile="$(mktemp)"
			valgrind  --log-file=valgrind.log --leak-check=full --track-origins=yes  "$dbgBashPath"  -c 'echo "pid of interest is $$"; echo $$ >'"$tmpFile ; source $*"
			local pidOfInterest=$(cat $tmpFile)
			echo "pidOfInterest='$pidOfInterest'"
			grep "$pidOfInterest" valgrind.log  > valgring.log.myscript
			;;
	esac
}


###############################################################################
# Main script

# default values for parameters
command=""
verbosity=1
oob_invokeOutOfBandSystem "$@"
while [ $# -gt 0 ]; do case $1 in
	-v|--verbose) ((verbosity++)) ;;
	-q|--quiet) ((verbosity--)) ;;
	--verbosity*) bgOptionGetOpt val: verbosity "$@" && shift ;;
	*)  bgOptionsEndLoop "$@" && break; set -- "${bgOptionsExpandedOpts[@]}"; esac; shift;
done
command="$1"; shift



case ${command:-status} in
	dump)
		declare -A proj
		ConstructObject Project proj .
		printfVars proj
		;;
	status)        static::SandboxProject::status "${passThruOpts[@]}"  "$@" ;;
	assets)        assets      "${passThruOpts[@]}" "$@" ;;
	install)       install     "${passThruOpts[@]}" "$@" ;;
	uninstall)     uninstall   "${passThruOpts[@]}" "$@" ;;
	funcman)       funcman     "${passThruOpts[@]}" "$@" ;;
	newProj)       newProj     "${passThruOpts[@]}" "$@" ;;
	tests)         testsCntr   "${passThruOpts[@]}" "$@" ;;
	buildPkg)      makeCntr    "${passThruOpts[@]}" "$@" ;;
	analyze)       analyzeCntr "${passThruOpts[@]}" "$@" ;;
	npm)           npmCntr     "${passThruOpts[@]}" "$@" ;;
	sdlc)          sdlcCntr    "${passThruOpts[@]}" "$@" ;;
	bashBuiltins)  bashBuiltinsCntr "${passThruOpts[@]}" "$@" ;;
	show)          assets summary  ;;
	*)  echo "error: unknown command '$command'. "
		echo "   See man $(basename $0)"
		;;
esac
